/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/material.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_Material::CSprite::CSprite()
{
	m_Size = 1.0f;
	m_Color = 1.0f;
}


void CAsset_Material::CSprite::CTuaType::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType& TuaType, CAsset_Material::CSprite& SysType)
{
	pLoadingContext->ReadAssetPath(TuaType.m_Path, SysType.m_Path);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}

void CAsset_Material::CLayer::CTuaType::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType& TuaType, CAsset_Material::CLayer& SysType)
{
	{
		const CAsset_Material::CSprite::CTuaType* pData = (const CAsset_Material::CSprite::CTuaType*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Sprite.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Sprite.m_Size);
		SysType.m_Sprite.resize(Size);
		for(int i=0; i<Size; i++)
		{
			CAsset_Material::CSprite::CTuaType::Read(pLoadingContext, pData[i], SysType.m_Sprite[i]);
		}
	}
	
}

void CAsset_Material::CTuaType::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType& TuaType, CAsset_Material& SysType)
{
	CAsset::CTuaType::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Material::CLayer::CTuaType* pData = (const CAsset_Material::CLayer::CTuaType*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(int i=0; i<Size; i++)
		{
			CAsset_Material::CLayer::CTuaType::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}

void CAsset_Material::CSprite::CTuaType::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Material::CSprite& SysType, CTuaType& TuaType)
{
	pLoadingContext->WriteAssetPath(SysType.m_Path, TuaType.m_Path);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Material::CLayer::CTuaType::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Material::CLayer& SysType, CTuaType& TuaType)
{
	{
		TuaType.m_Sprite.m_Size = SysType.m_Sprite.size();
		CAsset_Material::CSprite::CTuaType* pData = new CAsset_Material::CSprite::CTuaType[SysType.m_Sprite.size()];
		for(int i=0; i<SysType.m_Sprite.size(); i++)
		{
			CAsset_Material::CSprite::CTuaType::Write(pLoadingContext, SysType.m_Sprite[i], pData[i]);
		}
		TuaType.m_Sprite.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Material::CSprite::CTuaType)*SysType.m_Sprite.size());
		delete[] pData;
	}
}

void CAsset_Material::CTuaType::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Material& SysType, CTuaType& TuaType)
{
	CAsset::CTuaType::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Material::CLayer::CTuaType* pData = new CAsset_Material::CLayer::CTuaType[SysType.m_Layer.size()];
		for(int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Material::CLayer::CTuaType::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Material::CLayer::CTuaType)*SysType.m_Layer.size());
		delete[] pData;
	}
}

template<>
int CAsset_Material::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case LAYER_ARRAYSIZE:
			return GetLayerArraySize();
		case LAYER_SPRITE_ARRAYSIZE:
			return GetLayerSpriteArraySize(SubPath);
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Material::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case LAYER_ARRAYSIZE:
			SetLayerArraySize(Value);
			return true;
		case LAYER_SPRITE_ARRAYSIZE:
			SetLayerSpriteArraySize(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
float CAsset_Material::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const
{
	switch(ValueType)
	{
		case LAYER_SPRITE_SIZE_X:
			return GetLayerSpriteSizeX(SubPath);
		case LAYER_SPRITE_SIZE_Y:
			return GetLayerSpriteSizeY(SubPath);
	}
	return CAsset::GetValue<float>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Material::SetValue(int ValueType, const CSubPath& SubPath, float Value)
{
	switch(ValueType)
	{
		case LAYER_SPRITE_SIZE_X:
			SetLayerSpriteSizeX(SubPath, Value);
			return true;
		case LAYER_SPRITE_SIZE_Y:
			SetLayerSpriteSizeY(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<float>(ValueType, SubPath, Value);
}

template<>
vec2 CAsset_Material::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const
{
	switch(ValueType)
	{
		case LAYER_SPRITE_SIZE:
			return GetLayerSpriteSize(SubPath);
	}
	return CAsset::GetValue<vec2>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Material::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value)
{
	switch(ValueType)
	{
		case LAYER_SPRITE_SIZE:
			SetLayerSpriteSize(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec2>(ValueType, SubPath, Value);
}

template<>
vec4 CAsset_Material::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const
{
	switch(ValueType)
	{
		case LAYER_SPRITE_COLOR:
			return GetLayerSpriteColor(SubPath);
	}
	return CAsset::GetValue<vec4>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Material::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value)
{
	switch(ValueType)
	{
		case LAYER_SPRITE_COLOR:
			SetLayerSpriteColor(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec4>(ValueType, SubPath, Value);
}

template<>
CAssetPath CAsset_Material::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const
{
	switch(ValueType)
	{
		case LAYER_SPRITE_PATH:
			return GetLayerSpritePath(SubPath);
	}
	return CAsset::GetValue<CAssetPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Material::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value)
{
	switch(ValueType)
	{
		case LAYER_SPRITE_PATH:
			SetLayerSpritePath(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<CAssetPath>(ValueType, SubPath, Value);
}

int CAsset_Material::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_LAYER:
			return AddLayer();
		case TYPE_LAYER_SPRITE:
			return AddLayerSprite(SubPath);
	}
	return -1;
}

int CAsset_Material::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_LAYER:
			return DeleteLayer(SubPath);
			break;
		case TYPE_LAYER_SPRITE:
			DeleteLayerSprite(SubPath);
			break;
	}
}


