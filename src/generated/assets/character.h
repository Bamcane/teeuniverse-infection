/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverses.
 * 
 * TeeUniverses is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverses is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverses.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_CHARACTER__
#define __CLIENT_ASSETS_CHARACTER__

#include <shared/assets/asset.h>
#include <shared/tl/array.h>
#include <shared/assets/assetpath.h>

class CAsset_Character : public CAsset
{
public:
	static const int TypeId = 0;
	
	enum
	{
		TYPE_PART,
	};
	
	static inline CSubPath SubPath_Part(int Id0) { return CSubPath(TYPE_PART, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		IDLEPATH,
		WALKPATH,
		CONTROLLEDJUMPPATH,
		UNCONTROLLEDJUMPPATH,
		PART_ARRAYSIZE,
		PART_PTR,
		PART_ARRAY,
		PART_NAME,
		PART_DEFAULTPATH,
		PART,
	};
	
	class CIteratorPart
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorPart() : m_Index(0), m_Reverse(false) {}
		CIteratorPart(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorPart& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Part(m_Index); }
		bool operator==(const CIteratorPart& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorPart& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorPart BeginPart() const { return CIteratorPart(0, false); }
	CIteratorPart EndPart() const { return CIteratorPart(m_Part.size(), false); }
	CIteratorPart ReverseBeginPart() const { return CIteratorPart(m_Part.size()-1, true); }
	CIteratorPart ReverseEndPart() const { return CIteratorPart(-1, true); }
	
	class CPart
	{
	public:
		class CTuaType
		{
		public:
			tua_stringid m_Name;
			CAssetPath::CTuaType m_DefaultPath;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType& TuaType, CAsset_Character::CPart& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_Character::CPart& SysType, CTuaType& TuaType);
		};
		
	
	private:
		string< _fixed_string_core<128> > m_Name;
		CAssetPath m_DefaultPath;
	
	public:
		void copy(const CAsset_Character::CPart& Item)
		{
			m_Name.copy(Item.m_Name);
			m_DefaultPath = Item.m_DefaultPath;
		}
		
		void transfert(CAsset_Character::CPart& Item)
		{
			m_Name.transfert(Item.m_Name);
			m_DefaultPath = Item.m_DefaultPath;
		}
		
		inline const char* GetName() const { return m_Name.buffer(); }
		
		inline CAssetPath GetDefaultPath() const { return m_DefaultPath; }
		
		inline void SetName(const char* Value) { m_Name.copy(Value); }
		
		inline void SetDefaultPath(const CAssetPath& Value) { m_DefaultPath = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			Operation.Apply(m_DefaultPath);
		}
		
	};
	class CTuaType : public CAsset::CTuaType
	{
	public:
		CAssetPath::CTuaType m_IdlePath;
		CAssetPath::CTuaType m_WalkPath;
		CAssetPath::CTuaType m_ControlledJumpPath;
		CAssetPath::CTuaType m_UncontrolledJumpPath;
		CTuaArray m_Part;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType& TuaType, CAsset_Character& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_Character& SysType, CTuaType& TuaType);
	};
	

private:
	CAssetPath m_IdlePath;
	CAssetPath m_WalkPath;
	CAssetPath m_ControlledJumpPath;
	CAssetPath m_UncontrolledJumpPath;
	array< CAsset_Character::CPart, allocator_copy<CAsset_Character::CPart> > m_Part;

public:
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	
	void copy(const CAsset_Character& Item)
	{
		CAsset::copy(Item);
		m_IdlePath = Item.m_IdlePath;
		m_WalkPath = Item.m_WalkPath;
		m_ControlledJumpPath = Item.m_ControlledJumpPath;
		m_UncontrolledJumpPath = Item.m_UncontrolledJumpPath;
		m_Part.copy(Item.m_Part);
	}
	
	void transfert(CAsset_Character& Item)
	{
		CAsset::transfert(Item);
		m_IdlePath = Item.m_IdlePath;
		m_WalkPath = Item.m_WalkPath;
		m_ControlledJumpPath = Item.m_ControlledJumpPath;
		m_UncontrolledJumpPath = Item.m_UncontrolledJumpPath;
		m_Part.transfert(Item.m_Part);
	}
	
	inline CAssetPath GetIdlePath() const { return m_IdlePath; }
	
	inline CAssetPath GetWalkPath() const { return m_WalkPath; }
	
	inline CAssetPath GetControlledJumpPath() const { return m_ControlledJumpPath; }
	
	inline CAssetPath GetUncontrolledJumpPath() const { return m_UncontrolledJumpPath; }
	
	inline int GetPartArraySize() const { return m_Part.size(); }
	
	inline const CAsset_Character::CPart* GetPartPtr() const { return m_Part.base_ptr(); }
	
	inline const array< CAsset_Character::CPart, allocator_copy<CAsset_Character::CPart> >& GetPartArray() const { return m_Part; }
	inline array< CAsset_Character::CPart, allocator_copy<CAsset_Character::CPart> >& GetPartArray() { return m_Part; }
	
	inline const CAsset_Character::CPart& GetPart(const CSubPath& SubPath) const { return m_Part[SubPath.GetId()]; }
	
	inline const char* GetPartName(const CSubPath& SubPath) const { return m_Part[SubPath.GetId()].GetName(); }
	
	inline CAssetPath GetPartDefaultPath(const CSubPath& SubPath) const { return m_Part[SubPath.GetId()].GetDefaultPath(); }
	
	inline void SetIdlePath(const CAssetPath& Value) { m_IdlePath = Value; }
	
	inline void SetWalkPath(const CAssetPath& Value) { m_WalkPath = Value; }
	
	inline void SetControlledJumpPath(const CAssetPath& Value) { m_ControlledJumpPath = Value; }
	
	inline void SetUncontrolledJumpPath(const CAssetPath& Value) { m_UncontrolledJumpPath = Value; }
	
	inline void SetPartArraySize(int Value) { m_Part.resize(Value); }
	
	inline void SetPart(const CSubPath& SubPath, const CAsset_Character::CPart& Value) { m_Part[SubPath.GetId()].copy(Value); }
	
	inline void SetPartName(const CSubPath& SubPath, const char* Value) { m_Part[SubPath.GetId()].SetName(Value); }
	
	inline void SetPartDefaultPath(const CSubPath& SubPath, const CAssetPath& Value) { m_Part[SubPath.GetId()].SetDefaultPath(Value); }
	
	inline int AddPart()
	{
		int Id = m_Part.size();
		m_Part.increment();
		return Id;
	}
	
	inline bool IsValidPart(const CSubPath& SubPath) const { return (SubPath.GetId() >= 0 && SubPath.GetId() < m_Part.size()); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		Operation.Apply(m_IdlePath);
		Operation.Apply(m_WalkPath);
		Operation.Apply(m_ControlledJumpPath);
		Operation.Apply(m_UncontrolledJumpPath);
		for(int i=0; i<m_Part.size(); i++)
		{
			m_Part[i].AssetPathOperation(Operation);
		}
	}
	
};

#endif
