/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_ZONETYPE__
#define __CLIENT_ASSETS_ZONETYPE__

#include <shared/assets/asset.h>
#include <shared/tl/array.h>
#include <shared/assets/assetpath.h>

class CAsset_ZoneType : public CAsset
{
public:
	static const int TypeId = 20;
	
	enum
	{
		TYPE_INDEX,
	};
	
	static inline CSubPath SubPath_Index(int Id0) { return CSubPath(TYPE_INDEX, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		INDEX_ARRAYSIZE,
		INDEX_PTR,
		INDEX_ARRAY,
		INDEX_USED,
		INDEX_DESCRIPTION,
		INDEX_COLOR,
		INDEX_TITLE,
		INDEX_BORDERINDEX,
		INDEX_BORDERCOLOR,
		INDEX,
		IMAGEPATH,
	};
	
	class CIteratorIndex
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorIndex() : m_Index(0), m_Reverse(false) {}
		CIteratorIndex(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorIndex& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Index(m_Index); }
		bool operator==(const CIteratorIndex& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorIndex& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorIndex BeginIndex() const { return CIteratorIndex(0, false); }
	CIteratorIndex EndIndex() const { return CIteratorIndex(m_Index.size(), false); }
	CIteratorIndex ReverseBeginIndex() const { return CIteratorIndex(m_Index.size()-1, true); }
	CIteratorIndex ReverseEndIndex() const { return CIteratorIndex(-1, true); }
	
	class CIndex
	{
	public:
		class CTuaType_0_1_0
		{
		public:
			tua_uint8 m_Used;
			tua_stringid m_Description;
			tua_uint32 m_Color;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_1_0& TuaType, CAsset_ZoneType::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_1_0& TuaType);
		};
		
		class CTuaType_0_2_0
		{
		public:
			tua_uint8 m_Used;
			tua_stringid m_Description;
			tua_uint32 m_Color;
			tua_stringid m_Title;
			tua_int32 m_BorderIndex;
			tua_uint32 m_BorderColor;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_ZoneType::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_0& TuaType);
		};
		
	
	private:
		bool m_Used;
		string< _fixed_string_core<128> > m_Description;
		vec4 m_Color;
		string< _fixed_string_core<128> > m_Title;
		int m_BorderIndex;
		vec4 m_BorderColor;
	
	public:
		CIndex();
		void copy(const CAsset_ZoneType::CIndex& Item)
		{
			m_Used = Item.m_Used;
			m_Description.copy(Item.m_Description);
			m_Color = Item.m_Color;
			m_Title.copy(Item.m_Title);
			m_BorderIndex = Item.m_BorderIndex;
			m_BorderColor = Item.m_BorderColor;
		}
		
		void transfert(CAsset_ZoneType::CIndex& Item)
		{
			m_Used = Item.m_Used;
			m_Description.transfert(Item.m_Description);
			m_Color = Item.m_Color;
			m_Title.transfert(Item.m_Title);
			m_BorderIndex = Item.m_BorderIndex;
			m_BorderColor = Item.m_BorderColor;
		}
		
		inline bool GetUsed() const { return m_Used; }
		
		inline const char* GetDescription() const { return m_Description.buffer(); }
		
		inline vec4 GetColor() const { return m_Color; }
		
		inline const char* GetTitle() const { return m_Title.buffer(); }
		
		inline int GetBorderIndex() const { return m_BorderIndex; }
		
		inline vec4 GetBorderColor() const { return m_BorderColor; }
		
		inline void SetUsed(bool Value) { m_Used = Value; }
		
		inline void SetDescription(const char* Value) { m_Description.copy(Value); }
		
		inline void SetColor(vec4 Value) { m_Color = Value; }
		
		inline void SetTitle(const char* Value) { m_Title.copy(Value); }
		
		inline void SetBorderIndex(int Value) { m_BorderIndex = Value; }
		
		inline void SetBorderColor(vec4 Value) { m_BorderColor = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
		}
		
	};
	class CTuaType_0_1_0 : public CAsset::CTuaType_0_1_0
	{
	public:
		CTuaArray m_Index;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_1_0& TuaType, CAsset_ZoneType& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_1_0& TuaType);
	};
	
	class CTuaType_0_2_0 : public CAsset::CTuaType_0_2_0
	{
	public:
		CTuaArray m_Index;
		CAssetPath::CTuaType m_ImagePath;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_ZoneType& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_0& TuaType);
	};
	

private:
	array< CAsset_ZoneType::CIndex, allocator_copy<CAsset_ZoneType::CIndex> > m_Index;
	CAssetPath m_ImagePath;

public:
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	int AddSubItem(int Type, const CSubPath& SubPath);
	
	int AddSubItemAt(int Type, const CSubPath& SubPath, int Index);
	
	void DeleteSubItem(const CSubPath& SubPath);
	
	void RelMoveSubItem(const CSubPath& SubPath, int RelMove);
	
	void copy(const CAsset_ZoneType& Item)
	{
		CAsset::copy(Item);
		m_Index.copy(Item.m_Index);
		m_ImagePath = Item.m_ImagePath;
	}
	
	void transfert(CAsset_ZoneType& Item)
	{
		CAsset::transfert(Item);
		m_Index.transfert(Item.m_Index);
		m_ImagePath = Item.m_ImagePath;
	}
	
	inline int GetIndexArraySize() const { return m_Index.size(); }
	
	inline const CAsset_ZoneType::CIndex* GetIndexPtr() const { return m_Index.base_ptr(); }
	
	inline const array< CAsset_ZoneType::CIndex, allocator_copy<CAsset_ZoneType::CIndex> >& GetIndexArray() const { return m_Index; }
	inline array< CAsset_ZoneType::CIndex, allocator_copy<CAsset_ZoneType::CIndex> >& GetIndexArray() { return m_Index; }
	
	inline const CAsset_ZoneType::CIndex& GetIndex(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Index.size());
		return m_Index[SubPath.GetId()];
	}
	
	inline bool GetIndexUsed(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetUsed();
		else return false;
	}
	
	inline const char* GetIndexDescription(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetDescription();
		else return NULL;
	}
	
	inline vec4 GetIndexColor(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetColor();
		else return 1.0f;
	}
	
	inline const char* GetIndexTitle(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetTitle();
		else return NULL;
	}
	
	inline int GetIndexBorderIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetBorderIndex();
		else return 0;
	}
	
	inline vec4 GetIndexBorderColor(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetBorderColor();
		else return 1.0f;
	}
	
	inline CAssetPath GetImagePath() const { return m_ImagePath; }
	
	inline void SetIndexArraySize(int Value) { m_Index.resize(Value); }
	
	inline void SetIndex(const CSubPath& SubPath, const CAsset_ZoneType::CIndex& Value)
	{
		if(SubPath.GetId() < m_Index.size())
		{
			m_Index[SubPath.GetId()].copy(Value);
		}
	}
	
	inline void SetIndexUsed(const CSubPath& SubPath, bool Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetUsed(Value);
	}
	
	inline void SetIndexDescription(const CSubPath& SubPath, const char* Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetDescription(Value);
	}
	
	inline void SetIndexColor(const CSubPath& SubPath, vec4 Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetColor(Value);
	}
	
	inline void SetIndexTitle(const CSubPath& SubPath, const char* Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetTitle(Value);
	}
	
	inline void SetIndexBorderIndex(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetBorderIndex(Value);
	}
	
	inline void SetIndexBorderColor(const CSubPath& SubPath, vec4 Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetBorderColor(Value);
	}
	
	inline void SetImagePath(const CAssetPath& Value) { m_ImagePath = Value; }
	
	inline int AddIndex()
	{
		int Id = m_Index.size();
		m_Index.increment();
		return Id;
	}
	
	inline void AddAtIndex(int Index) { m_Index.insertat_and_init(Index); }
	
	inline void DeleteIndex(const CSubPath& SubPath) { m_Index.remove_index(SubPath.GetId()); }
	
	inline void RelMoveIndex(const CSubPath& SubPath, int RelMove) { m_Index.relative_move(SubPath.GetId(), RelMove); }
	
	inline bool IsValidIndex(const CSubPath& SubPath) const { return (SubPath.GetId() < m_Index.size()); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		for(int i=0; i<m_Index.size(); i++)
		{
			m_Index[i].AssetPathOperation(Operation);
		}
		Operation.Apply(m_ImagePath);
	}
	
};

template<> int CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const;
template<> bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, int Value);
template<> bool CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, bool DefaultValue) const;
template<> bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, bool Value);
template<> const char* CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, const char* DefaultValue) const;
template<> bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, const char* Value);
template<> vec4 CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const;
template<> bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value);
template<> CAssetPath CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const;
template<> bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value);

#endif
